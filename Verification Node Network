// Verification Node Implementation
class VerificationNode {
  constructor(nodeId, stake) {
    this.nodeId = nodeId;
    this.stake = stake;
    this.reputation = 100;
    this.verifiedSubmissions = new Map();
    this.consensusPool = new Map();
    this.qualityMetrics = new QualityMetrics();
  }

  // Quality Metrics System
  class QualityMetrics {
    constructor() {
      this.metrics = {
        dataCompleteness: 0,
        formatValidity: 0,
        temporalConsistency: 0,
        anomalyScore: 0
      };
    }

    async evaluateData(data, requirements) {
      try {
        const scores = {
          completeness: await this.checkCompleteness(data, requirements),
          validity: await this.validateFormat(data, requirements),
          consistency: await this.checkTemporalConsistency(data),
          anomalies: await this.detectAnomalies(data)
        };

        return this.aggregateScores(scores);
      } catch (error) {
        console.error('Error in quality evaluation:', error);
        throw error;
      }
    }

    async checkCompleteness(data, requirements) {
      const requiredFields = new Set(requirements.fields);
      const providedFields = new Set(Object.keys(data));
      
      const completeness = Array.from(requiredFields).filter(field => 
        providedFields.has(field)
      ).length / requiredFields.size;

      return completeness * 100;
    }

    async validateFormat(data, requirements) {
      let validFields = 0;
      const totalFields = Object.keys(data).length;

      for (const [field, value] of Object.entries(data)) {
        const expectedFormat = requirements.formats[field];
        if (this.matchesFormat(value, expectedFormat)) {
          validFields++;
        }
      }

      return (validFields / totalFields) * 100;
    }

    async checkTemporalConsistency(data) {
      if (!data.timestamp) return 100;

      const timestamp = new Date(data.timestamp);
      const now = new Date();
      
      // Check if data is recent and in chronological order
      if (timestamp > now) return 0;
      
      // Penalize old data gradually
      const ageInHours = (now - timestamp) / (1000 * 60 * 60);
      return Math.max(0, 100 - (ageInHours * 2));
    }

    async detectAnomalies(data) {
      let anomalyScore = 100;
      const numericalFields = Object.entries(data)
        .filter(([_, value]) => typeof value === 'number');

      for (const [field, value] of numericalFields) {
        // Simple Z-score based anomaly detection
        const zScore = Math.abs((value - this.getFieldMean(field)) / this.getFieldStdDev(field));
        if (zScore > 3) {
          anomalyScore -= 20;
        }
      }

      return Math.max(0, anomalyScore);
    }

    aggregateScores(scores) {
      const weights = {
        completeness: 0.3,
        validity: 0.3,
        consistency: 0.2,
        anomalies: 0.2
      };

      return Object.entries(scores).reduce((total, [metric, score]) => 
        total + (score * weights[metric]), 0);
    }
  }

  // Consensus Mechanism
  class ConsensusPool {
    constructor() {
      this.submissions = new Map();
      this.verifications = new Map();
      this.threshold = 0.67; // 2/3 majority for consensus
    }

    async addVerification(submissionId, nodeId, qualityScore) {
      if (!this.verifications.has(submissionId)) {
        this.verifications.set(submissionId, new Map());
      }

      const submissionVerifications = this.verifications.get(submissionId);
      submissionVerifications.set(nodeId, qualityScore);

      return this.checkConsensus(submissionId);
    }

    async checkConsensus(submissionId) {
      const verifications = this.verifications.get(submissionId);
      if (!verifications || verifications.size < 3) return null;

      const scores = Array.from(verifications.values());
      const averageScore = scores.reduce((a, b) => a + b) / scores.length;
      
      // Check if majority of scores are within 10% of average
      const consensusCount = scores.filter(score => 
        Math.abs(score - averageScore) <= averageScore * 0.1
      ).length;

      if (consensusCount / scores.length >= this.threshold) {
        return {
          achieved: true,
          finalScore: averageScore,
          confidence: consensusCount / scores.length
        };
      }

      return {
        achieved: false,
        currentParticipation: scores.length
      };
    }
  }

  // Node Operations
  async verifySubmission(submissionId, data, requirements) {
    try {
      // Evaluate data quality
      const qualityScore = await this.qualityMetrics.evaluateData(data, requirements);
      
      // Add to verification pool
      const consensus = await this.consensusPool.addVerification(
        submissionId,
        this.nodeId,
        qualityScore
      );

      // Record verification
      this.verifiedSubmissions.set(submissionId, {
        timestamp: Date.now(),
        qualityScore,
        consensus
      });

      return {
        nodeId: this.nodeId,
        submissionId,
        qualityScore,
        consensus
      };
    } catch (error) {
      console.error('Error in verification:', error);
      throw error;
    }
  }

  async updateReputation(verificationResult, actualQuality) {
    const accuracy = 100 - Math.abs(verificationResult.qualityScore - actualQuality);
    const reputationChange = accuracy >= 90 ? 1 : -1;
    
    this.reputation = Math.max(0, Math.min(100, this.reputation + reputationChange));
    
    // Adjust stake requirements based on reputation
    if (this.reputation < 50) {
      this.requireAdditionalStake();
    }
  }

  async getVerificationHistory(submissionId) {
    return this.verifiedSubmissions.get(submissionId) || null;
  }

  async getNodeStatus() {
    return {
      nodeId: this.nodeId,
      reputation: this.reputation,
      stake: this.stake,
      activeVerifications: this.verifiedSubmissions.size,
      consensusParticipation: this.consensusPool.size
    };
  }
}

// Verification Network Coordinator
class VerificationNetwork {
  constructor() {
    this.nodes = new Map();
    this.activeVerifications = new Map();
    this.networkStats = {
      totalNodes: 0,
      averageReputation: 0,
      totalStake: 0,
      verificationSpeed: 0
    };
  }

  async registerNode(nodeId, stake) {
    const node = new VerificationNode(nodeId, stake);
    this.nodes.set(nodeId, node);
    await this.updateNetworkStats();
    return node;
  }

  async assignVerificationTask(submissionId, data, requirements) {
    // Select nodes based on reputation and stake
    const selectedNodes = await this.selectVerificationNodes(submissionId);
    
    const verificationPromises = selectedNodes.map(nodeId => 
      this.nodes.get(nodeId).verifySubmission(submissionId, data, requirements)
    );

    const results = await Promise.all(verificationPromises);
    return this.aggregateVerificationResults(results);
  }

  async selectVerificationNodes(submissionId) {
    // Select nodes with high reputation and sufficient stake
    const qualifiedNodes = Array.from(this.nodes.entries())
      .filter(([_, node]) => node.reputation >= 70 && node.stake >= this.getMinimumStake())
      .sort((a, b) => b[1].reputation - a[1].reputation);

    // Select top 5 nodes for verification
    return qualifiedNodes.slice(0, 5).map(([nodeId]) => nodeId);
  }

  async aggregateVerificationResults(results) {
    const scores = results.map(r => r.qualityScore);
    const averageScore = scores.reduce((a, b) => a + b) / scores.length;
    
    return {
      finalScore: averageScore,
      confidence: this.calculateConfidence(scores),
      verifications: results
    };
  }

  calculateConfidence(scores) {
    const mean = scores.reduce((a, b) => a + b) / scores.length;
    const variance = scores.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / scores.length;
    const standardDeviation = Math.sqrt(variance);
    
    // Higher confidence when standard deviation is lower
    return Math.max(0, 100 - (standardDeviation * 10));
  }

  async updateNetworkStats() {
    const nodes = Array.from(this.nodes.values());
    
    this.networkStats = {
      totalNodes: nodes.length,
      averageReputation: nodes.reduce((sum, node) => sum + node.reputation, 0) / nodes.length,
      totalStake: nodes.reduce((sum, node) => sum + node.stake, 0),
      verificationSpeed: this.calculateAverageVerificationSpeed()
    };
  }

  getMinimumStake() {
    // Dynamic minimum stake based on network size and average reputation
    return Math.max(
      1000,
      this.networkStats.totalStake / this.networkStats.totalNodes * 0.5
    );
  }

  calculateAverageVerificationSpeed() {
    // Calculate average time for verifications to reach consensus
    const verificationTimes = Array.from(this.activeVerifications.values())
      .map(v => v.completionTime - v.startTime);
    
    return verificationTimes.length > 0
      ? verificationTimes.reduce((a, b) => a + b) / verificationTimes.length
      : 0;
  }
}

export { VerificationNode, VerificationNetwork };
