import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  Server, 
  Zap, 
  Shield, 
  Bell, 
  RefreshCw,
  ArrowUpRight,
  ArrowDownRight
} from 'lucide-react';

// Rest of the component remains the same...
const MonitoringInterface = () => {
  const [systemHealth, setSystemHealth] = useState({
    verification_network: { status: 'healthy', lastCheck: Date.now(), failures: 0 },
    blockchain_network: { status: 'healthy', lastCheck: Date.now(), failures: 0 },
    data_storage: { status: 'healthy', lastCheck: Date.now(), failures: 0 }
  });

  const [alerts, setAlerts] = useState([
    {
      id: 'alert-1',
      severity: 'warning',
      message: 'Node participation below threshold',
      timestamp: Date.now() - 300000
    },
    {
      id: 'alert-2',
      severity: 'critical',
      message: 'High verification failure rate detected',
      timestamp: Date.now() - 600000
    }
  ]);

  const [metrics, setMetrics] = useState({
    submissions: { total: 1240, rate: 42, trend: 5.2 },
    verifications: { total: 1180, rate: 38, trend: 4.8 },
    quality: { average: 92, trend: -0.5 },
    network: { nodes: 28, load: 65 }
  });

  const SystemStatus = () => (
    <Card className="mb-6">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle>System Status</CardTitle>
          <Button variant="outline" className="flex items-center gap-2">
            <RefreshCw className="w-4 h-4" />
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-3 gap-4">
          {Object.entries(systemHealth).map(([service, health]) => (
            <div key={service} className="p-4 border rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Server className="w-5 h-5 text-gray-500" />
                  <span className="font-semibold capitalize">
                    {service.replace('_', ' ')}
                  </span>
                </div>
                <span className={`px-2 py-1 rounded-full text-sm ${
                  health.status === 'healthy' 
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {health.status}
                </span>
              </div>
              <div className="text-sm text-gray-500">
                Last check: {new Date(health.lastCheck).toLocaleTimeString()}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );

  const AlertPanel = () => (
    <Card className="mb-6">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle>Active Alerts</CardTitle>
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-500">
              {alerts.length} active alerts
            </span>
            <Bell className="w-5 h-5" />
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {alerts.map(alert => (
            <div 
              key={alert.id}
              className={`p-4 rounded-lg flex items-center justify-between ${
                alert.severity === 'critical' 
                  ? 'bg-red-50 border-red-200'
                  : 'bg-yellow-50 border-yellow-200'
              }`}
            >
              <div className="flex items-center gap-3">
                <AlertTriangle className={
                  alert.severity === 'critical' 
                    ? 'text-red-500'
                    : 'text-yellow-500'
                } />
                <div>
                  <p className="font-medium">{alert.message}</p>
                  <p className="text-sm text-gray-600">
                    {new Date(alert.timestamp).toLocaleString()}
                  </p>
                </div>
              </div>
              <Button variant="outline" size="sm">
                Investigate
              </Button>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );

  const MetricsPanel = () => (
    <Card>
      <CardHeader>
        <CardTitle>Performance Metrics</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Activity className="w-5 h-5 text-blue-500" />
                  <span className="font-semibold">Submissions</span>
                </div>
                <span className={`flex items-center gap-1 ${
                  metrics.submissions.trend > 0 ? 'text-green-600' : 'text-red-600'
                }`}>
                  {metrics.submissions.trend > 0 ? (
                    <ArrowUpRight className="w-4 h-4" />
                  ) : (
                    <ArrowDownRight className="w-4 h-4" />
                  )}
                  {Math.abs(metrics.submissions.trend)}%
                </span>
              </div>
              <p className="text-2xl font-bold">{metrics.submissions.total}</p>
              <p className="text-sm text-gray-600">
                {metrics.submissions.rate} per hour
              </p>
            </div>

            <div className="p-4 bg-green-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5 text-green-500" />
                  <span className="font-semibold">Quality Score</span>
                </div>
                <span className={`flex items-center gap-1 ${
                  metrics.quality.trend > 0 ? 'text-green-600' : 'text-red-600'
                }`}>
                  {metrics.quality.trend > 0 ? (
                    <ArrowUpRight className="w-4 h-4" />
                  ) : (
                    <ArrowDownRight className="w-4 h-4" />
                  )}
                  {Math.abs(metrics.quality.trend)}%
                </span>
              </div>
              <p className="text-2xl font-bold">{metrics.quality.average}%</p>
            </div>
          </div>

          <div className="space-y-4">
            <div className="p-4 bg-purple-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Shield className="w-5 h-5 text-purple-500" />
                  <span className="font-semibold">Network Health</span>
                </div>
              </div>
              <p className="text-2xl font-bold">{metrics.network.nodes} nodes</p>
              <p className="text-sm text-gray-600">
                {metrics.network.load}% network load
              </p>
            </div>

            <div className="p-4 bg-orange-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Zap className="w-5 h-5 text-orange-500" />
                  <span className="font-semibold">Verifications</span>
                </div>
                <span className={`flex items-center gap-1 ${
                  metrics.verifications.trend > 0 ? 'text-green-600' : 'text-red-600'
                }`}>
                  {metrics.verifications.trend > 0 ? (
                    <ArrowUpRight className="w-4 h-4" />
                  ) : (
                    <ArrowDownRight className="w-4 h-4" />
                  )}
                  {Math.abs(metrics.verifications.trend)}%
                </span>
              </div>
              <p className="text-2xl font-bold">{metrics.verifications.total}</p>
              <p className="text-sm text-gray-600">
                {metrics.verifications.rate} per hour
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">System Monitoring</h1>
        <p className="text-gray-600">Real-time system health and performance</p>
      </div>

      <SystemStatus />
      <AlertPanel />
      <MetricsPanel />
    </div>
  );
};

export default MonitoringInterface;
